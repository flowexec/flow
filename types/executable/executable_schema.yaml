$schema: "http://json-schema.org/draft-07/schema#"
$id: "https://raw.githubusercontent.com/jahvon/flow/HEAD/types/executable/executable_schema.yaml"

title: Executable
description: |
  The executable schema defines the structure of an executable in the Flow CLI.
  Executables are the building blocks of workflows and are used to define the actions that can be performed in a workspace.

definitions:
  Verb:
    type: string
    description: |
      Keywords that describe the action an executable performs. While executables are configured with a single verb, 
      the verb can be aliased to related verbs within its group. For example, the `activate` verb can be replaced 
      with "enable" or "start" when referencing an executable. This allows users to use the verb that best describes 
      the action they are performing.
      
      ### Verb Groups
      
      - **Activation Group**: `activate`, `enable`, `start`, `trigger`
      - **Execution Group**: `exec`, `run`, `execute`
      - **Deactivation Group**: `deactivate`, `disable`, `stop`, `pause`
      - **Termination Group**: `kill`, `terminate`, `abort`
      - **Monitoring Group**: `watch`, `monitor`, `track`
      - **Restart Group**: `restart`, `reboot`, `reload`, `refresh`
      - **Installation Group**: `install`, `setup`, `deploy`
      - **Build Group**: `build`, `package`, `bundle`, `compile`
      - **Uninstallation Group**: `uninstall`, `teardown`, `undeploy`
      - **Update Group**: `update`, `upgrade`, `patch`
      - **Configuration Group**: `configure`, `manage`
      - **Edit Group**: `edit`, `transform`, `modify`
      - **Publish Group**: `publish`, `release`
      - **Distribution Group**: `push`, `send`, `apply`
      - **Test Group**: `test`, `validate`, `check`, `verify`
      - **Analysis Group**: `analyze`, `scan`, `lint`, `inspect`
      - **Launch Group**: `open`, `launch`, `show`, `view`
      - **Creation Group**: `create`, `generate`, `add`, `new`, `init`
      - **Set Group**: `set`
      - **Destruction Group**: `remove`, `delete`, `destroy`, `erase`
      - **Unset Group**: `unset`, `reset`
      - **Cleanup Group**: `clean`, `clear`, `purge`, `tidy`
      - **Retrieval Group**: `retrieve`, `fetch`, `get`, `request`
      
      ### Usage Notes
      
      1. [Verb group + Name] must be unique within the namespace of the workspace.
      2. When referencing an executable, users can use any verb from the appropriate group.
      3. Choose the verb that most accurately describes the action being performed.
      4. Be consistent in verb usage within projects or teams to maintain clarity.

      ### Examples

      - An executable configured with the `activate` verb could also be referenced using "enable" or "start".
      - A build process might use `build` as its primary verb, but could also be invoked with "package" or "assemble".
      - A cleanup routine configured with `clean` could be called using "purge" or "sanitize" for more specific connotations.
        
      By organizing verbs into these groups, flow provides flexibility in how actions are described while maintaining a 
      clear structure for executable operations.
    default: exec
    enum:
      # Activation Group
      - activate
      - enable
      - start
      - trigger
      # Execution Group
      - exec
      - run
      - execute
      # Deactivation Group
      - deactivate
      - disable
      - stop
      - pause
      # Termination Group
      - kill
      - terminate
      - abort
      # Monitoring Group
      - watch
      - monitor
      - track
      # Restart Group
      - restart
      - reboot
      - reload
      - refresh
      # Installation Group
      - install
      - setup
      - deploy
      # Build Group
      - build
      - package
      - bundle
      - compile
      # Uninstallation Group
      - uninstall
      - teardown
      - undeploy
      # Update Group
      - update
      - upgrade
      - patch
      # Configuration Group
      - configure
      - manage
      # Edit Group
      - edit
      - transform
      - modify
      # Publish Group
      - publish
      - release
      # Distribution Group
      - push
      - send
      - apply
      # Test Group
      - test
      - validate
      - check
      - verify
      # Analysis Group
      - analyze
      - scan
      - lint
      - inspect
      # Launch Group
      - open
      - launch
      - show
      - view
      # Creation Group
      - create
      - generate
      - add
      - new
      - init
      # Set Group
      - set
      # Destruction Group
      - remove
      - delete
      - destroy
      - erase
      # Unset Group
      - unset
      - reset
      # Cleanup Group
      - clean
      - clear
      - purge
      - tidy
      # Retrieval Group
      - retrieve
      - fetch
      - get
      - request
  Ref:
    type: string
    description: |
      A reference to an executable.
      The format is `<verb> <workspace>/<namespace>:<executable name>`.
      For example, `exec ws/ns:my-workflow`.
      
      The workspace and namespace are optional.
      If the workspace is not specified, the current workspace will be used.
      If the namespace is not specified, the current namespace will be used.
    pattern: "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+:[a-zA-Z0-9_-]+$"
  RefList:
    type: array
    items:
      $ref: '#/definitions/Ref'

  ### Executable Environment
  Parameter:
    type: object
    required: [ envKey ]
    description: |
      A parameter is a value that can be passed to an executable and all of its sub-executables.
      Only one of `text`, `secretRef`, or `prompt` must be set. Specifying more than one will result in an error.
    properties:
      text:
        type: string
        description: A static value to be passed to the executable.
        default: ""
      prompt:
        type: string
        description: A prompt to be displayed to the user when collecting an input value.
        default: ""
      secretRef:
        type: string
        description: A reference to a secret to be passed to the executable.
        default: ""
      envKey:
        type: string
        description: The name of the environment variable that will be assigned the value.
        default: ""
  ParameterList:
    type: array
    items:
      $ref: '#/definitions/Parameter'

  Argument:
    type: object
    required: [ envKey ]
    properties:
      flag:
        type: string
        description: |
          The flag to use when setting the argument from the command line.
          Either `flag` or `pos` must be set, but not both.
        default: ""
      pos:
        type: integer
        description: |
          The position of the argument in the command line ArgumentList. Values start at 1.
          Either `flag` or `pos` must be set, but not both.
        minimum: 1
        default: 0
      envKey:
        type: string
        description: The name of the environment variable that will be assigned the value.
        default: ""
      type:
        type: string
        description: The type of the argument. This is used to determine how to parse the value of the argument.
        enum: [string, int, float, bool]
        default: string
      default:
        type: string
        description: |
          The default value to use if the argument is not provided.
          If the argument is required and no default is provided, the executable will fail.
        default: ""
      required:
        type: boolean
        description: |
          If the argument is required, the executable will fail if the argument is not provided.
          If the argument is not required, the default value will be used if the argument is not provided.
        default: false
      value:
        type: string
        default: ""
        goJSONSchema:
          identifier: value
  ArgumentList:
    type: array
    items:
      $ref: '#/definitions/Argument'

  ### Executable Common
  Directory:
    type: string
    description: |
      The directory to execute the command in.
      If unset, the directory of the flow file will be used.
      If set to `f:tmp`, a temporary directory will be created for the process.
      If prefixed with `./`, the path will be relative to the current working directory.
      If prefixed with `//`, the path will be relative to the workspace root.
      Environment variables in the path will be expended at runtime.
    default: ""

### Executable Types
  ExecExecutableType:
    type: object
    description: Standard executable type. Runs a command/file in a subprocess.
    properties:
      dir:
        $ref: '#/definitions/Directory'
        default: ""
      params:
        $ref: '#/definitions/ParameterList'
      args:
        $ref: '#/definitions/ArgumentList'
      cmd:
        type: string
        description: |
          The command to execute.
          Only one of `cmd` or `file` must be set.
        default: ""
      file:
        type: string
        description: |
          The file to execute.
          Only one of `cmd` or `file` must be set.
        default: ""
      logMode:
        type: string
        goJSONSchema:
          type: io.LogMode
          imports: ["github.com/jahvon/tuikit/io"]
        description: |
          The log mode to use when running the executable.
          This can either be `hidden`, `json`, `logfmt` or `text`
        default: logfmt
      # unexported field needed to track log fields
      logFields:
        type: string
        additionalProperties:
          type: object
        goJSONSchema:
          type: map[string]interface{}
          identifier: logFields
        default: {}

  LaunchExecutableType:
    type: object
    required: [uri]
    description: Launches an application or opens a URI.
    properties:
      params:
        $ref: '#/definitions/ParameterList'
      args:
        $ref: '#/definitions/ArgumentList'
      app:
        type: string
        description: The application to launch the URI with.
        default: ""
      uri:
        type: string
        description: The URI to launch. This can be a file path or a web URL.
        default: ""
      wait:
        type: boolean
        description: If set to true, the executable will wait for the launched application to exit before continuing.
        default: false

  ParallelRefConfig:
    type: object
    description: Configuration for a parallel executable.
    properties:
      cmd:
        type: string
        description: |
          The command to execute.
          One of `cmd` or `ref` must be set.
        default: ""
      ref:
        $ref: '#/definitions/Ref'
        description: |
          A reference to another executable to run in serial.
          One of `cmd` or `ref` must be set.
        default: ""
      if:
        type: string
        description: A condition to determine if the executable should be run.
        default: ""
      args:
        type: array
        items:
         type: string
        description: Arguments to pass to the executable.
        default: []
      retries:
        type: integer
        description: The number of times to retry the executable if it fails.
        default: 0
        minimum: 0

  ParallelRefConfigList:
    type: array
    description: |
      A list of executables to run in parallel. The executables can be defined by it's exec `cmd` or `ref`.
    items:
      $ref: '#/definitions/ParallelRefConfig'

  ParallelExecutableType:
    type: object
    required: [execs]
    properties:
      params:
        $ref: '#/definitions/ParameterList'
      args:
        $ref: '#/definitions/ArgumentList'
      execs:
          $ref: '#/definitions/ParallelRefConfigList'
          description: |
              A list of executables to run in parallel.
              Each executable can be a command or a reference to another executable.
      maxThreads:
        type: integer
        description: The maximum number of threads to use when executing the parallel executables.
        default: 5
        minimum: 1
      failFast:
        type: boolean
        description: If set to true, the parallel executable will fail if any of the sub-executables fail.
        default: false

  RenderExecutableType:
    type: object
    required: [templateFile]
    description: Renders a markdown template file with data.
    properties:
      dir:
        $ref: '#/definitions/Directory'
        default: ""
      params:
        $ref: '#/definitions/ParameterList'
      args:
        $ref: '#/definitions/ArgumentList'
      templateFile:
        type: string
        description: The path to the markdown template file to render.
        default: ""
      templateDataFile:
        type: string
        description: The path to the JSON or YAML file containing the template data.
        default: ""

  RequestResponseFile:
    type: object
    required: [filename]
    description: Configuration for saving the response of a request to a file.
    properties:
      dir:
        $ref: '#/definitions/Directory'
        default: ""
      filename:
        type: string
        description: The name of the file to save the response to.
        default: ""
      saveAs:
        type: string
        enum: ["raw", "json", "indented-json", "yaml", "yml"]
        default: raw
        description: The format to save the response as.

  RequestExecutableType:
    type: object
    required: [url]
    description: Makes an HTTP request.
    properties:
      params:
        $ref: '#/definitions/ParameterList'
      args:
        $ref: '#/definitions/ArgumentList'
      method:
        type: string
        description: The HTTP method to use when making the request.
        enum: [GET, POST, PUT, PATCH, DELETE]
        default: GET
      url:
        type: string
        description: The URL to make the request to.
        default: ""
      body:
        type: string
        description: The body of the request.
        default: ""
      headers:
        type: object
        additionalProperties:
          type: string
        description: A map of headers to include in the request.
        default: {}
      timeout:
        type: string
        goJSONSchema:
          type: time.Duration
          imports: ["time"]
        description: The timeout for the request in Go duration format (e.g. 30s, 5m, 1h).
        default: 30m0s
      responseFile:
        $ref: '#/definitions/RequestResponseFile'
      transformResponse:
        type: string
        description: JQ query to transform the response before saving it to a file or outputting it.
        default: ""
      logResponse:
        type: boolean
        description: If set to true, the response will be logged as program output.
        default: false
      validStatusCodes:
        type: array
        items:
          type: integer
        description: |
          A list of valid status codes. If the response status code is not in this list, the executable will fail.
          If not set, the response status code will not be checked.
        default: []

  SerialRefConfig:
    type: object
    description: Configuration for a serial executable.
    properties:
      cmd:
        type: string
        description: |
          The command to execute.
          One of `cmd` or `ref` must be set.
        default: ""
      ref:
        $ref: '#/definitions/Ref'
        description: |
          A reference to another executable to run in serial.
          One of `cmd` or `ref` must be set.
        default: ""
      if:
        type: string
        description: A condition to determine if the executable should be run.
        default: ""
      args:
        type: array
        items:
          type: string
        description: Arguments to pass to the executable.
        default: []
      reviewRequired:
        type: boolean
        description: If set to true, the user will be prompted to review the output of the executable before continuing.
        default: false
      retries:
        type: integer
        description: The number of times to retry the executable if it fails.
        default: 0
        minimum: 0

  SerialRefConfigList:
    type: array
    description: |
      A list of executables to run in serial. The executables can be defined by it's exec `cmd` or `ref`.
    items:
      $ref: '#/definitions/SerialRefConfig'

  SerialExecutableType:
    type: object
    required: [execs]
    description: Executes a list of executables in serial.
    properties:
      params:
        $ref: '#/definitions/ParameterList'
      args:
        $ref: '#/definitions/ArgumentList'
      execs:
        $ref: '#/definitions/SerialRefConfigList'
        description: |
          A list of executables to run in serial.
          Each executable can be a command or a reference to another executable.
      failFast:
        type: boolean
        description: If set to true, the serial executable will fail if any of the sub-executables fail.
        default: false

type: object
required: [name, verb]
properties:
  visibility:
    $ref: '../common/schema.yaml#/definitions/Visibility'
    goJSONSchema:
      type: "common.Visibility"
      imports: ["github.com/jahvon/flow/types/common"]
  aliases:
    $ref: '../common/schema.yaml#/definitions/Aliases'
    goJSONSchema:
      type: "common.Aliases"
    default: []
  tags:
    $ref: '../common/schema.yaml#/definitions/Tags'
    goJSONSchema:
      type: "common.Tags"
    default: []
  verb:
    $ref: '#/definitions/Verb'
    default: exec
  name:
    type: string
    description: |
      The name of the executable. 

      Name is used to reference the executable in the CLI using the format `workspace:namespace/name`.
      [Verb group + Name] must be unique within the namespace of the workspace.
    default: ""
  description:
    type: string
    description: |
      A description of the executable.
      This description is rendered as markdown in the interactive UI.
    default: ""
  timeout:
    type: string
    goJSONSchema:
      type: time.Duration
      imports: [ "time" ]
    description: |
      The maximum amount of time the executable is allowed to run before being terminated.
      The timeout is specified in Go duration format (e.g. 30s, 5m, 1h).
    default: 30m0s
  #### Executable context fields
  workspace:
    type: string
    default: ""
    goJSONSchema:
      identifier: workspace
  namespace:
    type: string
    default: ""
    goJSONSchema:
      identifier: namespace
  workspacePath:
    type: string
    default: ""
    goJSONSchema:
      identifier: workspacePath
  flowFilePath:
    type: string
    default: ""
    goJSONSchema:
      identifier: flowFilePath
  inheritedDescription:
    type: string
    default: ""
    goJSONSchema:
      identifier: inheritedDescription
  #### Executable runner type fields
  #### go-jsonschema does not support oneOf, so we need to define the types separately and validate them in go.
  exec:
    $ref: '#/definitions/ExecExecutableType'
  launch:
    $ref: '#/definitions/LaunchExecutableType'
  request:
    $ref: '#/definitions/RequestExecutableType'
  render:
    $ref: '#/definitions/RenderExecutableType'
  serial:
    $ref: '#/definitions/SerialExecutableType'
  parallel:
    $ref: '#/definitions/ParallelExecutableType'
