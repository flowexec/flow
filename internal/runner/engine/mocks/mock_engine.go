// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jahvon/flow/internal/runner/engine (interfaces: Engine)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_engine.go -package=mocks github.com/jahvon/flow/internal/runner/engine Engine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	engine "github.com/jahvon/flow/internal/runner/engine"
	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
	isgomock struct{}
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockEngine) Execute(ctx context.Context, execs []engine.Exec, opts ...engine.OptionFunc) engine.ResultSummary {
	m.ctrl.T.Helper()
	varargs := []any{ctx, execs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(engine.ResultSummary)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockEngineMockRecorder) Execute(ctx, execs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, execs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockEngine)(nil).Execute), varargs...)
}
