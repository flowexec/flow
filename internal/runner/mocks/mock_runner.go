// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jahvon/flow/internal/runner (interfaces: Runner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_runner.go -package=mocks github.com/jahvon/flow/internal/runner Runner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	context "github.com/jahvon/flow/internal/context"
	executable "github.com/jahvon/flow/types/executable"
	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockRunner) Exec(arg0 *context.Context, arg1 *executable.Executable, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockRunnerMockRecorder) Exec(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRunner)(nil).Exec), arg0, arg1, arg2)
}

// IsCompatible mocks base method.
func (m *MockRunner) IsCompatible(arg0 *executable.Executable) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCompatible", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCompatible indicates an expected call of IsCompatible.
func (mr *MockRunnerMockRecorder) IsCompatible(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCompatible", reflect.TypeOf((*MockRunner)(nil).IsCompatible), arg0)
}

// Name mocks base method.
func (m *MockRunner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRunnerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRunner)(nil).Name))
}
