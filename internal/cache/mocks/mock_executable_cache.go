// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jahvon/flow/internal/cache (interfaces: ExecutableCache)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_executable_cache.go -package=mocks github.com/jahvon/flow/internal/cache ExecutableCache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	executable "github.com/jahvon/flow/types/executable"
	io "github.com/jahvon/tuikit/io"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutableCache is a mock of ExecutableCache interface.
type MockExecutableCache struct {
	ctrl     *gomock.Controller
	recorder *MockExecutableCacheMockRecorder
	isgomock struct{}
}

// MockExecutableCacheMockRecorder is the mock recorder for MockExecutableCache.
type MockExecutableCacheMockRecorder struct {
	mock *MockExecutableCache
}

// NewMockExecutableCache creates a new mock instance.
func NewMockExecutableCache(ctrl *gomock.Controller) *MockExecutableCache {
	mock := &MockExecutableCache{ctrl: ctrl}
	mock.recorder = &MockExecutableCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutableCache) EXPECT() *MockExecutableCacheMockRecorder {
	return m.recorder
}

// GetExecutableByRef mocks base method.
func (m *MockExecutableCache) GetExecutableByRef(logger io.Logger, ref executable.Ref) (*executable.Executable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutableByRef", logger, ref)
	ret0, _ := ret[0].(*executable.Executable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutableByRef indicates an expected call of GetExecutableByRef.
func (mr *MockExecutableCacheMockRecorder) GetExecutableByRef(logger, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutableByRef", reflect.TypeOf((*MockExecutableCache)(nil).GetExecutableByRef), logger, ref)
}

// GetExecutableList mocks base method.
func (m *MockExecutableCache) GetExecutableList(logger io.Logger) (executable.ExecutableList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutableList", logger)
	ret0, _ := ret[0].(executable.ExecutableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutableList indicates an expected call of GetExecutableList.
func (mr *MockExecutableCacheMockRecorder) GetExecutableList(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutableList", reflect.TypeOf((*MockExecutableCache)(nil).GetExecutableList), logger)
}

// Update mocks base method.
func (m *MockExecutableCache) Update(logger io.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExecutableCacheMockRecorder) Update(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExecutableCache)(nil).Update), logger)
}
