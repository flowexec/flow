// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jahvon/flow/internal/services/store (interfaces: BoltStore)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_store.go -package=mocks github.com/jahvon/flow/internal/services/store BoltStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBoltStore is a mock of BoltStore interface.
type MockBoltStore struct {
	ctrl     *gomock.Controller
	recorder *MockBoltStoreMockRecorder
}

// MockBoltStoreMockRecorder is the mock recorder for MockBoltStore.
type MockBoltStoreMockRecorder struct {
	mock *MockBoltStore
}

// NewMockBoltStore creates a new mock instance.
func NewMockBoltStore(ctrl *gomock.Controller) *MockBoltStore {
	mock := &MockBoltStore{ctrl: ctrl}
	mock.recorder = &MockBoltStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoltStore) EXPECT() *MockBoltStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBoltStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBoltStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBoltStore)(nil).Close))
}

// CreateBucket mocks base method.
func (m *MockBoltStore) CreateBucket() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockBoltStoreMockRecorder) CreateBucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockBoltStore)(nil).CreateBucket))
}

// Delete mocks base method.
func (m *MockBoltStore) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBoltStoreMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBoltStore)(nil).Delete), arg0)
}

// DeleteBucket mocks base method.
func (m *MockBoltStore) DeleteBucket() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockBoltStoreMockRecorder) DeleteBucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockBoltStore)(nil).DeleteBucket))
}

// Get mocks base method.
func (m *MockBoltStore) Get(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBoltStoreMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBoltStore)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockBoltStore) GetAll() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBoltStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBoltStore)(nil).GetAll))
}

// Set mocks base method.
func (m *MockBoltStore) Set(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockBoltStoreMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBoltStore)(nil).Set), arg0, arg1)
}
